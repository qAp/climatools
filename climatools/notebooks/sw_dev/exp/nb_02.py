
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/02_runner.ipynb

from pdb import *
from exp.nb_00 import *
from exp.nb_01 import *
import os
import shutil
import re
import subprocess
import numpy as np
from climatools.lblnew.export import vector_to_F77

def pat_parameter(name):
    '''
    Returns regular expression for assigning value to
    a parameter variable in Fortran.
    '''
    return r'''(\n [^!\n]+ parameter .* :: \s* &? \s* {name} \s* = ) (.*)'''.format(name=name)

def enter_parameters(s, **kwargs):
    '''
    Writes parameter values to the source code.
    '''
    for n, vs in kwargs.items():
        regex = re.compile(pat_parameter(n), re.VERBOSE)
        try: v = '(/' + ', '.join([str(v) for v in vs]) + '/)'
        except TypeError: v = str(vs)
        s = regex.sub(r'\g<1> ' + v, s)
    return s

def pat_data(name):
    dataname = ',\s+'.join(name.split(','))
    return r'''
    (\n \s+ data \s+ (?:{dataname}))
    ([^/,]+ / [^/]+ /)
    '''.format(dataname=dataname)

def enter_data(s, dtype=float, **kwargs):
    '''
    Write `data` values to the source code.
    '''
    for n, v in kwargs.items():
        regex = re.compile(pat_data(n), re.VERBOSE)
        v = vector_to_F77(v, dtype=dtype)
        v = ('\n' + 5 * ' ' + '&/' + '\n') + v + ('\n' + 5 * ' ' + '&/')
        s = regex.sub(r'\g<1>' + v, s)
    return s

def spectral_parameters(vmin=None, vmax=None, dv=None, nv=None):
    '''
    Return parameter-value dictionary for the spectral parameters.

    Example
    -------
    ```
    pvs = spectral_parameters(vmin=0, vmax=59595959, dv=.5, nv=100)
    print(enter_parameters(S, **pvs))
    ```
    '''
    vstar, nband = vmin, int((vmax - vmin) / (nv * dv))
    return {'vstar':vstar, 'nband':nband, 'nv':nv, 'dv':dv}

def pat_conc(name):
    return r'''
    (\n \s+ {name} \s* = \s* )([-+\.\deE]+)
    '''.format(name=name)

def conc_values(co2=None):
    '''
    Return variable-value dictionary for absorber concentrations.
    Note that this sets all layers' concentration to a constant.

    Example
    -------
    ```
    pvs = conc_values(co2=500e-6)
    enter_conc(S, **pvs)
    ```
    '''
    pvs = {}
    if co2: pvs['clayer'] = co2
    return pvs

def enter_conc(s, **kwargs):
    for n, v in kwargs.items():
        regex = re.compile(pat_conc(n), re.VERBOSE)
        s = regex.sub(r'\g<1>' + str(v), s, 1)
    return s

def molecule_flags_data(molecule=None):
    '''
    Return data-value dictionary for absorber flags.

    Example
    -------
    ```
    pvs = molecule_flags_data(molecule='co2')
    enter_data(S, dtype=int, **pvs)
    ```
    '''
    ns = ('h2o', 'co2', 'o3', 'o2')
    if molecule not in ns: raise Exception('Input molecule must be h2o, co2, o3 or o2.')
    n = ', '.join(['flg' + n for n in ns])
    v = np.array([1 if n == molecule else 0 for n in ns])
    return {n:v}

def optical_parameters(cosz=None, rsfc=None):
    '''
    Example
    -------
    ```
    pvs = optical_parameters(cosz=.4556, rsfc=.78)
    print(enter_parameters(S, **pvs))
    ```
    '''
    pvs = {}
    if cosz: pvs['cosz'] = cosz
    if rsfc: pvs['rsfc'] = rsfc
    return pvs

def pat_atmpro():
    '''
    Return regular expression that matches the assignment of the
    atmosphere profilein the source code.
    '''
    return r'''(\n [^!\n]+ atmosphere_profiles/)([a-z]{3,3})'''

def enter_atmpro(s, atmpro=None):
    '''
    Enter atmosphere profile name into the source code.

    Example
    -------
    ```
    S = enter_atmpro(S, atmpro='saw')
    ```
    '''
    if atmpro:
        regex = re.compile(pat_atmpro(), re.VERBOSE)
        s = regex.sub(r'\g<1>' + atmpro, s)
    return s


def kdist_parameters(ref_pts=None, ng_refs=None, ng_adju=None, klin=None):
    '''
    Return parameter-value dictionary for k-distribution method's parameters.

    Example
    -------
    ```
    pvs = kdist_parameters(ref_pts=[(500, 2315634563), (11, 257)], ng_refs=[7, 18], ng_adju=[-4, +7], klin=3.3333e-19)
    S = enter_parameters(S, **pvs)
    ```
    '''
    pvs = {}
    if ref_pts: pvs['p_refs'], pvs['t_refs'] = zip(*ref_pts)
    if ng_refs:
        pvs['ng_refs'], pvs['ng'], pvs['nref'] = ng_refs, sum(ng_refs), len(ng_refs)
    if ng_adju: pvs['ng_adju'] = ng_adju
    if klin: pvs.update({'option_klin':1, 'klin':klin})
    else: pvs.update({'option_klin':0})
    return pvs

def kdist_data(wgt=None):
    '''
    Return parameter-value dictionary for k-distribution method's data vectors.

    Example
    -------
    ```
    pvs = kdist_data(wgt=param.wgt)
    enter_data(S, **pvs)
    ```
    '''
    pvs = {}
    if wgt: pvs['wgt'] = np.array([w for ws in wgt for w in ws])
    return pvs

def write_submit_file(param):
    jobname = f'fitsw_{param.band}_{param.molecule}_{param.atmpro}'
    with open('lblnew-bestfit-sw.sub', mode='w', encoding='utf-8') as f:
        f.write('\n'.join(['#!/bin/bash',
                      f'#BSUB -J {jobname}',
                      '#BSUB -n 1',
                      '#BSUB -q serial',
                      '#BSUB -o out_%J',
                      '#BSUB -e err_%J',
                      './lblnew-bestfit-sw.exe',
                      'sleep 10']))

class LBLnewBestfitSWRun(object):
    '''
    Class for running lblnew-bestfit-sw.

    Example
    -------
    ```
    param = LBLnewBestfitSWParam(band=9, vmin=8200, vmax=14290, nv=10000, dv=0.001,
                     molecule='h2o', conc='atmpro',
                     ref_pts=[(300, 250), (300, 250)], ng_refs=[4, 6], ng_adju=[-3, 0],
                     wgt=[(.95, .9, .5, .5), (.5, .5, .5, .7, .85, .95)],
                     cosz=1., rsfc=0,
                     klin=3e-25,
                     option_k_lookup=0)
    runner = LBLnewBestfitSWRun('test_run_1', param)
    runner.input_params()
    proc = runner.build()
    out, err = proc.communicate()
    proc = runner.run()
    out, err = proc.communicate()
    ```
    '''
    def __init__(self, path, param):
        self.path = Path(path)
        self.param = param
        self.path.mkdir(exist_ok=True, parents=True)
        srcfiles = [SRC/n for n in FNAMES]
        for n in srcfiles: shutil.copy(n, self.path)

    def input_params(self):
        s = open(self.path/'lblnew-bestfit-sw.f', mode='r').read()
        pvs = spectral_parameters(vmin=self.param.vmin, vmax=self.param.vmax, dv=self.param.dv, nv=self.param.nv)
        s = enter_parameters(s, **pvs)
        pvs = molecule_flags_data(molecule=self.param.molecule)
        s = enter_data(s, dtype=int, **pvs)
        if self.param.molecule == 'co2':
            pvs = conc_values(co2=self.molecule.conc)
            s = enter_conc(s, **pvs)
        pvs = optical_parameters(cosz=self.param.cosz, rsfc=self.param.rsfc)
        s = enter_parameters(s, **pvs)
        s = enter_atmpro(s, atmpro=self.param.atmpro)
        pvs = kdist_parameters(ref_pts=self.param.ref_pts, ng_refs=self.param.ng_refs, ng_adju=self.param.ng_adju, klin=self.param.klin)
        s = enter_parameters(s, **pvs)
        pvs = kdist_data(wgt=self.param.wgt)
        s = enter_data(s, **pvs)
        open(self.path/'lblnew-bestfit-sw.f', mode='w').write(s)

    def build(self):
        cwd = os.getcwd()
        os.chdir(self.path)
        proc = subprocess.Popen(
            ['ifort', '-g', '-CB', '-traceback', '-fpe0', '-r8', '-warn', 'unused',
             'lblcom.f', 'lblnew-bestfit-sw.f', '-o', 'lblnew-bestfit-sw.exe'],
             stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        os.chdir(cwd)
        return proc

    def run(self):
        cwd = os.getcwd()
        os.chdir(self.path)
        write_submit_file(self.param)
        proc = subprocess.Popen('bsub < lblnew-bestfit-sw.sub', shell=True,
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE,)
        os.chdir(cwd)
        return proc
